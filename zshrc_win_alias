## powershell aliases

alias powerwhoami='echo whoami'
alias powerchown='echo " takeown \n icacls \"c:\\\Users\\\Public\\\\file.txt\" /setowner \"administrator\" \n "'
alias powerdiff='echo " Compare-Object (get-content file1.txt) (get-content file2.txt) \n Compare-Object (gc file1.txt) (gc file2.txt) -SyncWindow 0 \n "'
alias powersudo-l='echo "whoami /priv"'
alias powerecho='echo " echo \"string\" \n \"string\" \n \"string\" | Out-File -FilePath .\output.txt"'
alias powerhostname='echo " hostname \n Invoke-Command -ScriptBlock {hostname} \n "' 
alias winchown='echo takeown'
alias powerhostname-f='echo " [System.Net.Dns]::GetHostByName(\$env:COMPUTERNAME) (or) [System.Net.Dns]::GetHostByName(\$env:computername).HostName --To get FQDN of local machine use GetHostEntry in place of GetHostByName it will work too \n [System.Net.Dns]::GetHOSTByName(\"ip here\") (or) [System.Net.Dns]::GetHostByName(\"ip here\").HostName --To get FQDN of remote machine \n [System.Net.Dns]::Resolve($null).Hostname \n (Get-ADComputer \$(hostname)).DNSHostName --In AD for FQDN \n "'
alias powerdf='echo " Get-Disk \n Get-PSDrive \n wmic logicaldisk get size,freespace,caption \n "'
alias powerchmod='echo "icacls \n icacls \"c:\\\Users\\\Public\\\\file.txt\" /grant:r \"administrator:(F)\" /C -->full access to admin account \n icacls \"c:\\\Users\\\Public\\\\file.txt\" /grant:r \"users:(RX)\" /C --> read and execute to users \n icacls \"c:\\\Users\\\Public\\\\file.txt\" /grant:r \"users:(R)\" /C -->read only permission to users \n "'
alias poweruptime='echo " Get-CimInstance -ClassName Win32_OperatingSystem | Select LastBootUpTime "'
alias powercat='echo "Get-Content file.txt \n  cat file.txt \n gc file.txt \n type file.txt"'
alias power_etc_passwd='echo "Get-LocalUser \n "'
alias powervi='echo " No vi like editor on powershell \n "'
alias powertouch='echo "Net-Item -Name file.txt -ItemType file \n Out-File -FilePath file.txt \n ni file.txt -type file \n "'
alias powerchattr='echo " Set-ItemProperty \n Get-ItemProperty \n "'
alias powerappend='echo " Add-Content -Path c:\\\tmp\\\file.txt -value \"text to append\" \n \"some text\" | Out-File -append -filepath file.txt (or) \"COMMAND\" | Out-File -filepath file.txt -append"'
alias powerempty='echo " Clear-Content -path c:\\\tmp  -Filter \"*.txt\" -Force \n get-alias | out-null --> nullify the object \n get-alias > $null --> clear/nulliffy object"'
alias powerhostnamectl='echo " Rename-Computer \"new_hostname\" -Restart \n "'
alias powernull='echo " Clear-Content -path c:\\\tmp  -Filter \"*.txt\" -Force \n get-alias | out-null --> nullify the object \n get-alias > $null --> clear/nulliffy object \n "'
alias powertar='echo "tar \n "'
alias powerclear='echo " [System.Console]::Clear() \n cls \n clear"'
alias poweroverwrite='echo " \"COMMAND\" | Out-File c:\\\file.txt -force \n set-content -Path file.txt -value \"text here\" \n "'
alias powergrep='echo " Select-String \n \nEg: \n Get-Content output.txt \| Select-String \"password\" \n Select-String \"Password\" c:\\\Temp\\\*.txt  \n ipconfig.exe | select-string \"IP.*Address\" -casesensitive -->get ip address \n get-process | out-string -stream | select-string \"svchost|rundll\" \n select-string \"p[at]t*rn\" *.log | select-object path --> like grep -iR \n netstat.exe -ano -p tcp | select-string \":139\" -quiet \n Select-String -Pattern "Regex_word_here" \n select-string -SimpleMatch \"word_here\" \n "'
alias powersort='echo " Sort-Object \n \nEg: \n dir c:\\\ | sort-object length | select -first 1 -->asceding order \n dir c:\\\ | sort-object length -descending | select -first -->descending order \n dir c:\\\windows\\\system32\\\*.exe,c:\\\windows\\\system32\\\*.dll | sort-object length,extension,name -descending | select-object -first 20 -property length,fullname \n dir c:\\\Windows\\\*.exe | sort-object lastaccesstime | select-object name,lastaccesstime -->by last accesstime \n "'
alias powerls='echo " Get-ChildItem \n dir \n ls \n "'
alias powerpwd='echo " Get-Location \n gl \n $pwd \n "'
alias powercd='echo " Set-Location \n sl \n cd \n chdir \n "'
alias powerchdir='echo " Set-Location \n sl \n cd \n chdir \n "'
alias powerrsync='echo " robocopy \n Robocopy C:\\\SourceDir C:\\\DestDir \n robocopy C:\\\SourceDir C:\\\DestDir /E --copy all content including empty directory \n robocopy c:\\\sourcedir c:\\\destdir /minage:14 --copying files older than 14 days \n robocopy c:\\\sourcedir c:\\\destdir /MIR --here where rsync comes \n robocopy c:\\\sourcedir c:\\\destdir /E /copy:S /IS /IT --copy has following flags D-Data,A-Attributes,T-Timestamp,S-NTFS acl,O-Owner info,U-Auditing info and /IS-includes the same files, /IT-includes tweakedfiles \n robocopy c:\\\sourcedir c:\\\destdir /MIR /dcopy:T --copy directory tree with timestamps \n "'
alias powerdate='echo " date \n "'
alias powerftp='echo " ftp \n "'
alias powermkdir='echo " new-item \n \nEg:\n new-item \$HOME\\\DIRECTORY -type directory \n "'
alias powerrm='echo " remove-item file.txt \n ri \n del \n rm \n "'
alias powerrm-r='echo " remove-item .\* -recurse \n remove-item * -recurse -WhatIf \n "'
alias powerrmdir='echo " rmdir \n rd \n remove-item -recurse DirectoryName \n "'
alias powercp='echo " copy-item  \n cpi \n copy \n cp \n \nEg: \n copy-item somefolder\\\file.txt otherfolder\\\file.txt \n copy-item somefolder\\\* otherfolder\\\ -->recursive copy \n copy-item somefolder\\\* somedirectory\\\ -recurse --> recursive copy including subdirs and files in subdirs \n "'
alias powermv='echo " move-item \n mi \n mv \n move \n \nEg: \n move-item somefoder\\\file.txt otherfolder\\\file.txt  \n move-item somefolder\\\* otherfolder\\\* -->recursive move including subdirs \n rename-item somefile.txt file.txt \n rename-item somefolder folder \n "'
alias powerhead='echo " Get-Content -head 10 file.txt \n get-content file.txt | select -first 10 \n get-service | select-object -first 5 --> for objects \n "'
alias powertail='echo " Get-Content -tail 10 file.txt \n get-content file.txt | select -last  10 \n get-service | select-object -last 5 --> for objects \n get-content -file.txt --wait --> similar to tail -f \n "' 
alias poweruniq='echo " get-content file.txt | select -unique \n get-eventlog application | select-object EventID -unique \n "'
alias powertee='echo " dir | tee-object -variable sniff --> storing the output in variable sniff and outputting the data to terminal \n dir | tee-object file.txt -->storing the output in file \"junk.txt\" and outputting data to terminal \n "'
alias powermore='echo " more file.txt \n get-childitem \$env:windir | more \n get-childitem \$env:windir | out-host -paging \n "'
alias powerless='echo " more file.txt \n get-childitem \$env:windir | more \n get-childitem \$env:windir | out-host -paging \n "'
alias poweralias='echo " new-alias nn notepad.exe -->create new alias \n set-alias nn netsh.exe -->change existing alias \n dir alias:\\\ (or) (get-alias *).DisplayName -->get all built-in aliases \n "'
alias powerstdout='echo " \"some text\" > .\output.txt --> \">\" is alias for Out-File \n dir > file.txt  \n dir | out-file -Filepath file.txt \n "'
alias powerstderr='echo " get-alias 2> \$null \n \$x = dir 2>&1 -->error and output to \$x \n > -->overwrite a file \n >> -->append to a file \n >& -->combine pipeline streams like 2>&1 \n 1> --> success/normal output \n 2> --> errors \n 3> --> warnings \n 4> --> verbose 5> --> debug \n 6> --> information/progress \n *> --> all of the above \n dir *>> file.txt --> combine all streams and append to a file.txt \n "'
alias powerxml='echo "Get-Service | export-clixml -path services.xml \n \$objects  = import-clixml -path services.xml \n get-smbshare | export-clixml -path shares.xml \n "'
alias powercsv='echo " get-service | export-csv -path services.csv \n \$objects = import-csv -path services.csv \n \$objects = where-object{\$_.status -eq \"Running\"} \n get-smbshare | export-csv -path c:\\\Temp\\\shares.csv \n get-content -path C:\\\Temp\\\shares.csv \n "'
alias powerjson='echo " Get-Service | ConvertTo-Json | Out-File -FilePath services.json \n \$Object = Get-Content -Raw services.json | ConvertFrom-Json \n get-smbshare | convertto-json | out-file -filepath shares.json \n "'
alias powerhtml='echo " Get-Process | convertto-html -property Name,Path,ID -title \"Process Report\" -head \"<h1> Process Report</h1>\" -body \"<h2>Report Was Run: \$(get-date)</h2><hr>\" | out-file -filepath \$env:temp\\\report.html \n Get-SmbShare | ConvertTo-Html -Property Name,Path | Out-File -FilePath .\\\shares.html \n "'

alias powersystemctl_list-unit-files='echo " Get-Service"'
alias powersystemctl='echo " Get-Service \n And other Cmdlets include: \n Set-Service \n Start-Service \n Stop-Service \n Suspend-Service \n Resume-Service \n Restart-Service \n New-Service \n New-Service \n "'
alias powersystemctl_start='echo " Start-Service -Name \"service_name_here\" \n Set-Service -Name \"service_name_here\" -Status running \n "'
alias powersystemctl_stop='echo " Stop-Service -Name \"service_name_here\" \n Set-Service -Name \"service_name_here\" -Status stopped \n "'
alias powersystemctl_status='echo " Get-Service -Name \"service_name_here\" \n Get-Service | Where-Object(\$_status -eq \"Running\"} -->list only currently running services \n Get-Service \"WinDefend\" -RequiredServices -->get the services that are required to run \"WinDefend\" Service \n Get-Service \"WinDefend\" -DependentServices -->get the services that are dependent on \"WinDefend\" Service \n Get-Service | Sort-Object status -->List sort by status \n "'
alias powersystemctl_enable='echo " Set-Service -Name \"service_name_here\" -StartupType automatic -->only enabling the service \n Set-Service -Name \"service_name_here\" -Status running -StartupType automatic \n -->enable the service and start immediately"'
alias powersystemctl_disable='echo " Set-Service -Name \"service_name_here\" -StartupType -disabled -->only disabling the service \n Set-Service -Name \"service_name_here\" -Status stopped -StartupType -disabled -->disable and stop the service immediately"'
alias powersystemctl_is-active='echo " (get-service \"Service_name_here\").status \n "'
alias powersystemctl_create_service='echo " New-Service -Name \"TestService\" -BinaryPathName [\"C:\\\Windows\System32\svchost.exe -k netsvcs\"] -->replace \"]\" with single quotes \n "'
alias powerps='echo " Get-Process \n \nEg: \n get-process -name \"powershell*\" \n get-process \"powershell*\" \n Get-Process -Name powershell_ise | Select_Object -Property \"*\" \n Get-Process -Name powershell_ise | Select_Object Name,ID,VM,Modules \n Get-Process -Name powershell_ise | Select-Object -ExpandProperty Modules | Select-Object Filename -->listing all the modules with directories \n get-process *> file.txt --> the data stored in file.txt is not text its all about objects \n get-process | where {\$_.name -like \"*ware*\" \n "'
alias powerkill='echo "stop-process \n "'
alias powerpkill='echo "stop-process -Name \"notepad\" \n "'
alias powerkillall='echo "stop-process "'
alias poweropen='echo " Invoke-Item $env:temp\doc.html \n start-process firefox.exe \n "'
alias powercrontab='echo " Get-ScheduledTask \n Set-ScheduledTask \n Enable-ScheduledTask \n Disable-ScheduledTask \n New-ScheduledTask \n Register-ScheduledTask \n Unregister-ScheduledTask \n Start-ScheduledTask \n Stop-ScheduledTask \n Export-ScheduledTask \n "'
alias powerping='echo " Test-NetConnection -ComputerName \"Hostname or IP\" -InformationLevel Detailed \n "'
alias powertraceroute='echo " Test-NetConnection \"hostname\" -traceroute \n "'
alias powerifconfig='echo " Get-NetIPConfiguration \n "'
alias powerip-a='echo " Get-NetIPConfiguration \n Get-NetIPAddress \n (Get-NetIPAddress).IPv4Address \n New-NetIPAddress InterfaceAlias \"Ethernet\" IPv4Address 192.168.5.32 PrefixLength \"24\" Default Gateway 192.168.5.1 -->to set ip address for new interface \n Set-NetIPAddress InterfaceAlias \"Ethernet\" IPv4Address 192.168.5.52 PrefixLength \"24\" -->to change ip address of interface \n Get-NetAdapter -Name \"Ethernet\" | Remove NetIPAddress -->remove ip of interface \n Set-NetIPInterface InterfaceAlias \"Ethernet\" dhcp enabled -->set interface to dhcp \n Get-DnsClient -->to get dns information \n Set-DnsClientServerAddress InterfaceAlias \"Ethernet\" ServerAddresses \"8.8.8.8\" \"8.8.4.4.\" -->to add dns servers to interface \n Get-DnsClientCache -->Get dns cache info \n Clear-DnsClientCache -->flush dns cache \n invoke-command -ComputerName -ScriptBlock [ipconfig /release] -->release dhcp leases \n invoke-command -ComputerName -ScriptBlock [ipconfig/renew] -->renew dhcp leases \n Disable-NetAdapter -Name \"AdapterName\" -->disable adapter \n Enable-NetAdapter -Name \"AdapterName\" \n Get-NetAdapter -->list all network adapters \n Get-NetAdapterHardwareInfo -->Get Network Adapter Hardwae information \n Rename-NetAdapter -Name \"Ethernet\" -NewName \"Ethernet1\" \n Get-NetRoute -Protocol local -DestinationPrefix 192.168\* (or) Get-NetRoute -InterfaceAlias \"Ethernet\" -->Getting routing information \n New-NetRoute -DestinationPrefix "192.168.5.0/24" -InterfaceAlias \"Ethernet\" -NextHop 192.168.5.1 --> add new route \n "'
alias poweriproute='echo "Get-NetRoute -Protocol local -DestinationPrefix 192.168\* (or) Get-NetRoute -InterfaceAlias \"Ethernet\" -->Getting routing information \n New-NetRoute -DestinationPrefix "192.168.5.0/24" -InterfaceAlias \"Ethernet\" -NextHop 192.168.5.1 --> add new route \n "'
alias powerroute='echo "Get-NetRoute -Protocol local -DestinationPrefix 192.168\* (or) Get-NetRoute -InterfaceAlias \"Ethernet\" -->Getting routing information \n New-NetRoute -DestinationPrefix "192.168.5.0/24" -InterfaceAlias \"Ethernet\" -NextHop 192.168.5.1 --> add new route \n "'
alias powernslookup='echo " Resolve-DnsName example.com \n "'
alias powernetstat='echo " Get-NetTCPConnection \n "'
alias powerss='echo " Get-NetTCPConnection \n "'
alias powersmb='echo " get-help share --> shows all cmdlets for samba and shares \n get-smbshare | select-object -property name,path \n Get-SmbClientConfiguration \n Get-SmbConnection -->get smb connections \n Get-SmbMultichannelConnection --get smb multi channel connections \n Get-SmbOpenFile -->get smb open files \n "'
alias powersamba='echo " get-help share --> shows all cmdlets for samba and shares \n get-smbshare | select-object -property name,path \n Get-SmbClientConfiguration \n Get-SmbConnection -->get smb connections \n Get-SmbMultichannelConnection --get smb multi channel connections \n Get-SmbOpenFile -->get smb open files \n "'
alias powerteaming='echo " New-NetLbfoTeam -Name NICTEAM01 -TeamMembers Ethernet, Ethernet2 -TeamingMode SwitchIndependent -TeamNicName NICTEAM01 -LoadBalancingAlgorithm Dynamic \n "'
alias poweriptables='echo " New-NetFirewallRule,Copy-NetFirewallRule,Disable-NetFirewallRule,Enable-NetFirewallRule,Get-NetFirewallRule,Remove-NetFirewallRule,Rename-NetFirewallRule,Set-NetFirewallRule,Show-NetFirewallRule \n New-NetFirewallRule -DisplayName \"HTTP-Inbound\" -Profile @(\"Domain\", \"Private\") -Direction Inbound -Action Allow -Protocol TCP -LocalPort @(\"80\", \"443\") -->allow inbound 80,443 for domain, private profiles \n New-NetFirewallRule -Program \"C:\\\Program Files (x86)\\\Mozilla Firefox\\\firefox.exe\" -Action Block -Profile Domain, Private -DisplayName \"Block Firefox browser\" -Description \"Block Firefox browser\" -Direction Outbound -->block firefox for outbound connections \n New-NetFirewallRule -DisplayName "AllowRDP" -RemoteAddress 192.168.2.200 -Direction Inbound -Protocol TCP -LocalPort 3389 -Action Allow -->allow rdp for a IP \n Get-NetFirewallrule -DisplayName \"HTTP-Inbound\" | Get-NetFirewallAddressFilter | Set-NetFirewallAddressFilter -RemoteAddress 192.168.1.10 -->to edit an existing firewall rule \n Disable-NetFirewallRule -DisplayName \"Block Firefox browser\" -->to disable firewall rule \n Enable-NetFirewallRule -Name FPS-ICMP4-ERQ-In -->enable firewall rule, allowing icmp ping \n Get-NetFirewallRule | Select-Object -Property DisplayName -->to get only firewall rule display names \n "'
alias powerfirewalld='echo " New-NetFirewallRule,Copy-NetFirewallRule,Disable-NetFirewallRule,Enable-NetFirewallRule,Get-NetFirewallRule,Remove-NetFirewallRule,Rename-NetFirewallRule,Set-NetFirewallRule,Show-NetFirewallRule \n New-NetFirewallRule -DisplayName \"HTTP-Inbound\" -Profile @(\"Domain\", \"Private\") -Direction Inbound -Action Allow -Protocol TCP -LocalPort @(\"80\", \"443\") -->allow inbound 80,443 for domain, private profiles \n New-NetFirewallRule -Program \"C:\\\Program Files (x86)\\\Mozilla Firefox\\\firefox.exe\" -Action Block -Profile Domain, Private -DisplayName \"Block Firefox browser\" -Description \"Block Firefox browser\" -Direction Outbound -->block firefox for outbound connections \n New-NetFirewallRule -DisplayName "AllowRDP" -RemoteAddress 192.168.2.200 -Direction Inbound -Protocol TCP -LocalPort 3389 -Action Allow -->allow rdp for a IP \n Get-NetFirewallrule -DisplayName \"HTTP-Inbound\" | Get-NetFirewallAddressFilter | Set-NetFirewallAddressFilter -RemoteAddress 192.168.1.10 -->to edit an existing firewall rule \n Disable-NetFirewallRule -DisplayName \"Block Firefox browser\" -->to disable firewall rule \n Enable-NetFirewallRule -Name FPS-ICMP4-ERQ-In -->enable firewall rule, allowing icmp ping \n Get-NetFirewallRule | Select-Object -Property DisplayName -->to get only firewall rule display names \n "'
alias poweruname='echo " \$Properties = \"Caption\", \"CSName\", \"Version\", \"BuildType\", \"OSArchitecture\"; Get-CimInstance Win32_OperatingSystem | Select-Object $Properties \n "'
alias powerman='echo " Get-Help"'
alias powerwc='echo " Measure-Object -line \n \nEg: \n cat file.txt | measure -line -word -character \n ps | measure -line | select -ExpandProperty Lines \n "'
alias powerfind='echo " Get-ChildItem \"c:\\\Users\" -Recurse | where {\$_.Name -like \"*user.txt*\"} \n Get-ChildItem -Recurse -Filter \"*.txt\" \n Get-ChildItem | where Length -gt 3000 \n get-itemproperty \"c:\\\Users\\\Public\\\file.txt\" -name creationtime -->get file/folder creation time \n get-itemproperty \"c:\\\users\\\Public\" -name LastAccessTime -->get file/folder access time \n get-itemproperty \"c:\\\users\\\Public\" -name LastWriteTime -->get file/folder by Modified time \n"'
alias powerwhich='echo " (Get-Command notepad.exe).Path \n "'
alias powerwhereis='echo " (Get-Command notepad.exe).Path \n "'
alias powercurl='echo "Invoke-WebRequest"'
alias powerwget='echo "Invoke-WebRequest"'
alias powerln-s='echo " New-item -Path C:\\\LinkDir -ItemType SymbolicLink -Value E:\\\RealDir \n "'
alias powerln='echo " New-item -Path C:\\\LinkDir -ItemType SymbolicLink -Value E:\\\RealDir \n "'
alias powerbuiltinvars='echo " \$pwd \n \$env, \$env:PATH, \$env:SYSTEMROOT, \$env:PsModulePath \n \$? -->contains \"\$true\" if last operation succeeded, otherwise \"\$false\" \n \$_ -->contains the current object in a pipeline \n \$\$ -->useful in showing last run command like in linux \n \$args -->Contains an array of the parameters passed to a function or script \n \$false -->Contains the Boolean value of False ([Int] 0, or \$null) \n \$home -->Contains the users home directory path \n \$input -->Contains objects piped into a function, filter, or script \n \$lastexitcode -->Contains the error code of the last Win32 executable execution \n \$matches -->Contains matches to a regular expression search \n \$null -->Contains nothing and cannot have contents \n \$pshome -->Contains the directory path where PowerShell is installed \n \$profile -- Full path to your profile script \n \$OFS -->Output Field Separator, used as the default delimiter when converting arrays to strings, and is a single space character by default \n \$true -->Contains the Boolean value of True ([Int] 1, or -not \$null) \n \$PSCommandPath -->Contains the full path and file name of the script thats being run. This variable is valid in all scripts \n "'
alias powerenv='echo " get-childitem env:\\\ \n new-item env:\\\Hello -value \"PS\" -->create new env variable \n set-item env:\\\Hello -value \"Powershell\" -->change value of env variable that already exists \n remove-item env:\\\Hello --> remove env variable \n \$getusername = \"My user name is \$env:USERNAME\" --> usage of env variables in strings \n "'
alias powerdf-h='echo " get-psdrive \n "'
alias powerpath='echo " \$env:path \n  powerpathadd --> (use this) to get the information on how to add,delete,update the path values \n "'
alias powerpathadd='cat ~/bin/env_add_win.txt'
alias poweruseradd='echo " New-LocalUser -Name \"User_name_here\" -Password \"password_here\" \n "'
alias poweradduser='echo " New-LocalUser -Name \"User_name_here\" -Password \"password_here\" \n "'
alias poweruserdel='echo " Remove-LocalUser -Name \"User_name_here\"  \n \$user= Get-LocalUser -Name \"user_name_here\" ; Remove-LocalUser -SID \$user.SID ; Get-CimInstance -Class Win32_UserProfile | ? SID -eq \$user.SID | Remove-CimInstance -->to remove user completely includig home dir and profile \n "'
alias powerdeluser='echo " Remove-LocalUser -Name \"User_name_here\"  \n \$user= Get-LocalUser -Name \"user_name_here\" ; Remove-LocalUser -SID \$user.SID ; Get-CimInstance -Class Win32_UserProfile | ? SID -eq \$user.SID | Remove-CimInstance -->to remove user completely includig home dir and profile \n "'
alias powerusermod-L='echo " Disable-LocalUser -Name \"user_name_here\" -ErrorAction SilentlyContinue \n "'
alias powergroups='echo " Get-LocalGroup  \n other commands include -Get-LocalGroup,New-LocalGroup,Remove-LocalGroup,Rename-LocalGroup,Set-LocalGroup \n "'
alias powergroupadd='echo " New-LocalGroup -Name \"Accounts\" -Descriptio \"Account Dept\" \n "'
alias poweraddgroup='echo " New-LocalGroup -Name \"Accounts\" -Descriptio \"Account Dept\" \n "'
alias powergroupdel='echo " Remove-LocalGroup -Name \"Accounts\" \n "'
alias powerdelgroup='echo " Remove-LocalGroup -Name \"Accounts\" \n "'
alias powerusermod-ag='echo " Add-LocalGroupMember -Group Administrators -Member \"user_name_here\" \n "'
alias powergpasswd='echo " Remove-LocalGroupMember -Group Administrators -Member \"user_name_here\" -ErrorAction SilentlyContinue  \n "'
alias powerjobs='echo " get-job \n receive-job \n remove-job \n start-job \n stop-job \n wait-job \n suspend-job \n resume-job \n "'
alias power-item_property='echo "clear-item \n clear-itemproperty \n copy-item \n copy-itemproperty \n get-childitem \n get-item \n get-itemproperty \n get-itempropertyvalue \n invoke-item \n move-item \n move-itemproperty \n new-item \n new-itemproperty \n remove-item \n remove-itemproperty \n rename-item \n rename-itemproperty \n set-item \n set-itemproperty \n "'
alias power-select='echo " select-object \n \nEg: \n get-process \"Powershell*\" | select-object -Property Path \n get-process \"Powershell*\" | select-object modules \n get-process \"Powershell*\" | select-object -expandproperty modules \n get-eventlog Application | select-object EventID -unique \n get-eventlog -logname system | select-object -last 10 \n get-service | select-object -first 5 \n "'
alias power-where='echo " where-object (or) where (or) \$(Temp Variable) \n Where-Object {\$_.Status -ne \"Running\"} \n Where-Object {\$_.Name -like \"*item*\"} \n Where {\$_.Description -match \"^Secur.\"} \n Where {\$_.Enabled} \n Get-LocalUser | Where { \$_.Enabled } \n Where { (\$_.Id -ge 100) -and (\$_.Name -like \"svc*\") } \n get-childitem c:\\\windows\\\system32 -recurse | where-object {\$_.length -gt 10000000} | sort-object length -desc | select-object fullname,length \n get-command | where-object {\$_.name -like \"*item*\"} \n get-childitem hkcu:\\\ | where-object {\$_.subkeycount -gt 2} \n get-eventlog -logname system -newest 10 | where-object {(\$_.message -match \"computer\") -and (\$_.timegenerated -gt \"8/18/2020\")} \n get-service | where { \$psitem.status -ne \"running\" } \n "'
alias power-properties='echo " get-member \n get-process | get-member \n get-process |gm \n "'
alias power-methods='echo " get-member \n get-process | get-member \n get-process |gm \n "'
alias power-drives='echo " get-psdrive \n dir c:\\\ \n dir hklm:\\\ \n dir hkcu:\\\ \n dir variable:\\\ \n dir alias:\\\ \n dir cert:\\\ \n dir env:\\\ \n dir function:\\\ \n new-psdrive -name Drive_name_here -psprovider filesystem -root \\\\\\localhost\\\c\$ \n "'
alias power-out_string='echo " Get-Service | out-string -->converts the objects to string  \n "'
alias power-out_file='echo " Out-File \n Get-Alias | out-file c:\\\aliases.txt -force -->overwrites the file \n Get-Alias | out-file c:\aliases.txt -append -->appends to the file \n "'
alias power-out_gridview='echo " out-gridview \n ps | select-object Name,Id,WorkingSet,Path | Out-gridview \n "'
alias power-out-printer='echo " out-printer \n lp \n get-alias | out-printer --> pdf is created with all aliases \n get-alias | out-printer \\\\\\server\\\sharedprinter -->to a real printer \n "'
alias power-format_list='echo " get-help format \n get-item hklm:\\\software | format-list * \n "'
alias power-format_table='echo " get-help format \n dir \$env:windir\\\*.exe | format-table * \n "'
alias power-format_wide='echo " get-help format \n dir \$env:windir | format-wide \n "'

## windows aliases

alias winping='echo " ping \n "'
alias wintouch='echo "copy NUL file.txt \n type NUL > file.txt \n echo . 2>file.txt \n echo "" > junk.txt \n "'
alias winwhoami='echo "whoami \n "'
alias wintar='echo " tar \n "'
alias windf='echo " wmic logicaldisk get size,freespace,caption \n "'
alias winhostname='echo " hostname \n "'
alias winhostname-f='echo " whoami /fqdn \n "'
alias winwhois='echo " whois -->sysinternals \n "'
alias wingroups='echo "whoami /groups \n net localgroup --for local \n net group --for AD Env \n "'
alias wingroupadd='echo "net localgroup \"group_name_here\" /add \n"'
alias winaddgroup='echo "net localgroup \"group_name_here\" /add \n"'
alias wingroupdel='echo "net localgroup \"group_name_here\" /delete \n"'
alias windelgroup='echo "net localgroup \"group_name_here\" /delete \n"'
alias winusermod-ag='echo "net localgroup \"group_name_here\" \"user_name_here\" /add --> adding localuser to group \n net localgroup users domainname\\\username /add -->adding domain user to localgroup \n"'
alias wingpasswd='echo "net localgroup \"group_name_here\" \"user_name_here\" /delete --> removing localuser from group \n net localgroup users domainname\\\username /delete -->removing domain user from localgroup \n"'
alias winsudo-l='echo "whoami /priv"'
alias winchattr='echo attrib'
alias wincd='echo cd'
alias winchdir='echo chdir'
alias winclear='echo cls'
alias wincurl='echo curl'
alias windate='echo " date /T && time /T \n echo %date% %time% "'
alias winrm='echo "del"'
alias winrm-r='echo "del /S .\* (or) del /Q /S .\* --delete files in current directory and subdirectories but directories are not deleted use rmdir instead"'
alias winls='echo dir'
alias winfind='echo " dir /s file.txt \n dir /s /b file.txt \n dir /s c:\\\file.txt \n dir DirectoryName /AD /s \n dir c:\DirectoryName /Ad /s \n"'
alias winfinddays='echo " forfiles /P \"c:\\\Users\Public\" /m *.txt /c \"cmd /c if @isdir==FALSE echo @path\" /d -30 --older than 30 days \n forfiles /P \"c\:Users\Public\" /S /D +19-04-2022 /c \"cmd /c echo @path @fdate @ftime\ --on or newer than specified date"'
alias wingrep='echo " findstr /s /i wordhere *.* --search every file in current dir and sub dirs for word \"wordhere\" with ignoring case sensitive \n findstr \"word1 word2 word3\" file.txt --it will search for word1 and word2 or word3 or any of them its not literal search \n findstr /C:\"word1 word2 word3\" file.txt -- its literal search of \"word1 word2 word3\" in a file \n findstr /R regexpattern file.txt --regex way  \n findstr /B /C:wordhere file.txt --string at beginning of line \n findstr /E /C:wordhere file.txt --string at end of line \n findstr /M /N /C:\"wordhere\" *.txt --print only filenames matching \"wordhere\" string in file.txt"'
alias winftp='echo ftp'

alias winip-a='echo " ipconfig \n netsh interface ip show config \n netsh --for ip,firewall,routing configuration and more \n 
 netsh interface show interface --interface status and name \n netsh interface ip show interfaces --index number of interfaces \n
 netsh int ip set address \"local area connection\" static [ip] [netmask] [gw] 1 --adding static ip address to interface \n netsh interface ip set address \"Local Area Connection\" dhcp --dhcp configuration \n netsh interface ip set dns <NIC name> dhcp --get DNS servers via DHCP \n
 netsh interface ipv4 add route x.x.x.x/x <interface name> <gw> --add route \n netsh interface ipv4 delete route x.x.x.x/x <interface name> <gw> --del route \n
 netsh interface ip add dns name=\"Local Area Connection\" addr=8.8.8.8 --adding a primary dns server to interface \n netsh interface ip add dnsserver "Local Area Connection" 8.8.4.4 --adding seconding dnsserver to interface \n netsh interface ip set dns \"Local Area Connection\" dhcp --obtain dns automatically \n 
 netsh firewall show allowedprogram --allowed inbound connections \n netsh advfirewall firewall add rule name=\"Open RDP\" protocol=TCP dir=in localport=3389 action=allow --Opening a firewall port \n
 netsh advfirewall firewall add rule name=\"newrule\" dir=in action=allow program=\"%ProgramFiles%\some\program.exe\" --allow program to make inbound connection \n netsh advfirewall set allprofiles/currentprofile state on/off --enable/disable windows firewall for all/current profile \n netsh advfirewall reset --reset windows firewall \n netsh advfirewall firewall show rule name=all --all firewall rules \n netsh advfirewall show currentprofile --firewall rules for current profile \n
 netsh wlan show profiles --check wireless profiles \n netsh wlan show networks --available wireless connections \n netsh wlan show interfaces --show wireless interfaces \n
 "'
alias winifconfig='echo " ipconfig \n netsh interface ip show config \n netsh --for ip,firewall,routing configuration and more \n 
 netsh interface show interface --interface status and name \n netsh interface ip show interfaces --index number of interfaces \n
 netsh int ip set address \"local area connection\" static [ip] [netmask] [gw] 1 --adding static ip address to interface \n netsh interface ip set address \"Local Area Connection\" dhcp --dhcp configuration \n netsh interface ip set dns <NIC name> dhcp --get DNS servers via DHCP \n
 netsh interface ipv4 add route x.x.x.x/x <interface name> <gw> --add route \n netsh interface ipv4 delete route x.x.x.x/x <interface name> <gw> --del route \n
 netsh interface ip add dns name=\"Local Area Connection\" addr=8.8.8.8 --adding a primary dns server to interface \n netsh interface ip add dnsserver "Local Area Connection" 8.8.4.4 --adding seconding dnsserver to interface \n netsh interface ip set dns \"Local Area Connection\" dhcp --obtain dns automatically \n 
 netsh firewall show allowedprogram --allowed inbound connections \n netsh advfirewall firewall add rule name=\"Open RDP\" protocol=TCP dir=in localport=3389 action=allow --Opening a firewall port \n
 netsh advfirewall firewall add rule name=\"newrule\" dir=in action=allow program=\"%ProgramFiles%\some\program.exe\" --allow program to make inbound connection \n netsh advfirewall set allprofiles/currentprofile state on/off --enable/disable windows firewall for all/current profile \n netsh advfirewall reset --reset windows firewall \n netsh advfirewall firewall show rule name=all --all firewall rules \n netsh advfirewall show currentprofile --firewall rules for current profile \n
 netsh wlan show profiles --check wireless profiles \n netsh wlan show networks --available wireless connections \n netsh wlan show interfaces --show wireless interfaces \n
 "'
alias winiproute='echo "netsh interface ipv4 add route x.x.x.x/x <interface name> <gw> --add route \n netsh interface ipv4 delete route x.x.x.x/x <interface name> <gw> --del route \n"'
alias winroute='echo "netsh interface ipv4 add route x.x.x.x/x <interface name> <gw> --add route \n netsh interface ipv4 delete route x.x.x.x/x <interface name> <gw> --del route \n"'
alias winchmod='echo "icacls \n icacls \"c:\\\Users\\\Public\\\\file.txt\" /grant:r \"administrator:(F)\" /C -->full access to admin account \n icacls \"c:\\\Users\\\Public\\\\file.txt\" /grant:r \"users:(RX)\" /C --> read and execute to users \n icacls \"c:\\\Users\\\Public\\\\file.txt\" /grant:r \"users:(R)\" /C -->read only permission to users \n "'
alias winchown='echo " takeown \n icacls \"c:\\\Users\\\Public\\\\file.txt\" /setowner \"administrator\" \n "'
alias winmkdir='echo " md or mkdir \n "'
alias winrmdir='echo " rd or rmdir \n "'
alias winln-s='echo " mklink \n "'
alias winwhich='echo " where \n "'
alias winwhereis='echo " where \n "'
alias winln='echo " mklink \n "'
alias winless='echo " more \n "'
alias winwc='echo " find /c /v \"\" \n type file.txt | findstr /v \"^$\" | find /c /v \"\" --> count lines removing all the empty lines \n sc query | find /v \"^$\" | find /c /v \"\" --> counting all lines of services removing empty lines \n "'
alias winmore='echo more'
alias wincp='echo copy \n robocopy \n xcopy'
alias winmv='echo " move --for moving files \n ren --change name of file or directory \n robocopy c:\\\sourcedir c:\\\destdir /move /minage:14 --moving files older than 14 days \n "'
alias winrsync='echo " robocopy \n Robocopy C:\\\SourceDir C:\\\DestDir \n robocopy C:\\\SourceDir C:\\\DestDir /E --copy all content including empty directory \n robocopy c:\\\sourcedir c:\\\destdir /minage:14 --copying files older than 14 days \n robocopy c:\\\sourcedir c:\\\destdir /MIR --here where rsync comes \n robocopy c:\\\sourcedir c:\\\destdir /E /copy:S /IS /IT --copy has following flags D-Data,A-Attributes,T-Timestamp,S-NTFS acl,O-Owner info,U-Auditing info and /IS-includes the same files, /IT-includes tweakedfiles \n robocopy c:\\\sourcedir c:\\\destdir /MIR /dcopy:T --copy directory tree with timestamps \n "'
alias winchage='echo " net accounts \n net user Username \n "'
alias winprint='echo "net print"'
alias winw='echo " query user --in AD Env \n wmic computersystem get username --local/AD \n net session \n "' 
alias winuptime='echo "net statistics"'
alias win_etc_passwd='echo "net user \n wmic userccount list full \n "'
alias winuseradd='echo " net user username password /add \n net user username * \n net user username password /add /comment:BasicUser /fullname:name /logonpasswordchg:yes /workstation:workstation1,workstation2 /domain"'
alias winadduser='echo " net user username password /add \n net user username * \n net user username password /add /comment:BasicUser /fullname:name /logonpasswordchg:yes /workstation:workstation1,workstation2 /domain"'
alias winuserdel='echo " net user username /del"'
alias windeluser='echo " net user username /del"'
alias winusermod-L='echo " net user username /active:yes|no"'
alias winnetstat='echo " netstat -a \n netstat -o \n netstat -na \n netstat -b \n netstat -p tcp/udp/tcpv6/udpv6 \n netstat -q \n"'
alias winss='echo " netstat -a \n netstat -o \n netstat -na \n netstat -b \n netstat -p tcp/udp/tcpv6/udpv6 \n netstat -q \n"'
alias winroute='echo " netstat -r \n route print \n "'
alias winnslookup='echo nslookup'
alias winpath='echo path'
alias winvi='echo " copy con file.txt --then in terminal write the output once completed save it using CTRL-Z then Enter"'
alias winsudo='echo runas'
alias winenv='echo set'
alias winps='echo " tasklist \n tasklist /svc \n wmic process get ProcessId,Description,ParentProcessId,ReadOperationCount,WriteOperationCount \n "'
alias winkill='echo " taskkill /IM explorer.exe /F --kill task by name \n taskkill /PID 123 /F --kill by pid \n wmic process <pid> delete \n "'
alias winpkill='echo " taskkill /PID 123 /F --kill by pid \n taskkill /IM explorer.exe /F --kill task by name \n wmic process where name=\"explorer.exe\" \n "'
alias winkillall='echo "taskkill /IM explorer.exe /F --kill task by name \n"'

alias winsystemctl_list-unit-files='echo "sc query --list all services \n wmic service list full \n wmic service where started=\"true\" list brief \n wmic service where started=\"true\" get name, pathname, processid \n "'
alias winsystemctl='echo " sc query --list all services \n sc query <service-name> --query about servicename \n sc queryex state=all type=service \n wmic service where started=\"true\" list brief \n wmic service where started=\"true\" get name, pathname, processid \n "'
alias winsystemctl_start='echo " sc start \"service_name_here\" \n net start \"service_name_here\"  \n "'
alias winsystemctl_stop='echo " sc stop \"service_name_here\" \n net stop \"service_name_here\" \n "'
alias winsystemctl_status='echo " sc qc \"service_name_here\" -->shows starttype/binary path \n sc queryex \"service_name_here\" -->shows state/pid \n "'
alias winsystemctl_disable='echo " sc config \"service_name_here\" start= disabled --start option can be  boot,system,auto,demand,disabled,delayed-auto \n sc config \"service_name_here\" start= disabled && sc stop \"service_name_here\" -->disabled and stop service immediately \n "' 
alias winsystemctl_enable='echo " sc config \"service_name_here\" start= auto --start option can be  boot,system,auto,demand,disabled,delayed-auto \n sc config \"service_name_here\" start= auto && sc start \"service_name_here\" -->enable and start service immediately \n "' 
alias winsystemctl_create_service='echo " sc create MyService binpath= \"C:\\\MyService.exe\" DisplayName=\"My service\" \n "'

alias wincrontab='echo "schtasks"'
alias winstrings='echo " strings -->sysinternals \n more < <pathtofile/exe> | findstr \".\" \n "'
alias winsort='echo " sort"'
alias winhostnamectl='echo " systeminfo \n wmic computersystem where name=\"%computername%\" call rename name=\"newname\" -->rename the host and later restart it to take effect \n "'
alias wintar='echo tar'
alias wintelnet='echo telnet'
alias winssh='echo " ssh \n winrm \n winrs \n"'
alias wincat='echo type'
alias winuname='echo " ver \n systeminfo \n "'
alias winwhois='echo whois'
alias windiff='echo fc'
alias winsamba='echo "wmic share list brief \n wmic share list full \n "'
alias winsmb='echo "wmic share list brief \n wmic share list full \n "'
alias winbackground='echo start'
alias wintraceroute='echo tracert'



alias winlscpu='echo "need to be added"'
alias winlsmem='echo "need to be added"'
alias winlsusb='echo "need to be added"'
alias winlspci='echo "need to be added"'
alias winlshw='echo "need to be added"'
alias winlsblk='echo "need to be added"'
alias windf-h='echo "need to be added"'

alias winstartup='echo "wmic startup list full"'
alias winservice_packs='echo "wmic qfe list brief \n wmic qfe list full \n "'
alias winpubpriv='echo "Get-NetConnectionProfile \n Set-NetConnectionProfile -Name "Unidentified network" -NetworkCategory Private \n "'


alias powerall='echo "          powerwhoami powerchown powerdiff powersudo-l \n powerecho powerhostname  powerhostname-f powerdf powerchmod \n poweruptime powercat power_etc_passwd powervi powertouch \n powerchattr powerappend powerempty powerhostnamectl \n powernull powertar powerclear poweroverwrite powergrep \n powersort powerls powerpwd powercd powerchdir \n powerrsync powerdate powerftp powermkdir powerrm \n powerrm-r powerrmdir powercp powermv powerhead \n powertail poweruniq powertee powermore powerless \n poweralias powerstdout powerstderr powerxml powercsv \n powerjson powerhtml  \n powersystemctl_list-unit-files powersystemctl powersystemctl_start powersystemctl_stop powersystemctl_status powersystemctl_enable \n powersystemctl_disable powersystemctl_is-active powersystemctl_create_service powerps powerkill \n powerpkill powerkillall poweropen powercrontab powerping \n powertraceroute powerifconfig powerip-a poweriproute powerroute \n powernslookup powernetstat powerss powersmb powersamba \n powerteaming poweriptables powerfirewalld poweruname powerman \n powerwc powerfind powerwhich powerwhereis powercurl \n powerwget powerln-s powerln powerbuiltinvars powerenv \n powerdf-h powerpath powerpathadd poweruseradd poweradduser \n poweruserdel powerdeluser powerusermod-L powergroups powergroupadd \n poweraddgroup powergroupdel powerdelgroup powerusermod-ag powergpasswd \n powerjobs power-item_property power-select power-where power-properties \n power-methods power-drives power-out_string power-out_file power-out_gridview \n power-out-printer power-format_list power-format_table power-format_wide \n "' 
alias winall='echo " winping wintouch winwhoami wintar windf \n winhostname winhostname-f winwhois wingroups wingroupadd \n winaddgroup wingroupdel windelgroup winusermod-ag wingpasswd \n winsudo-l winchattr wincd winchdir winchown \n winclear wincurl windate winrm winrm-r \n winls winfind winfinddays wingrep winftp  \n winip-a winifconfig winiproute winroute winchmod \n winchown winmkdir winrmdir winln-s winwhich \n winwhereis winln winless winwc winmore \n wincp winmv winrsync winchage winprint \n winw winuptime win_etc_passwd winuseradd winadduser \n winuserdel windeluser winusermod-L winnetstat winss \n winroute winnslookup winpath winvi winsudo \n winenv winps winkill winpkill winkillall  \n winsystemctl_list-unit-files winsystemctl winsystemctl_start winsystemctl_stop winsystemctl_status \n winsystemctl_disable winsystemctl_enable winsystemctl_create_service  wincrontab winstrings \n winsort winhostnamectl wintar wintelnet winssh \n wincat winuname winwhois windiff winsamba \n winsmb winbackground wintraceroute winlscpu winlsmem \n winlsusb winlspci winlshw winlsblk windf-h  \n winstartup winservice_packs winpubpriv \n "'
